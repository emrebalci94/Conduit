
@{
    ViewData["Title"] = "Welcome To Conduit";
}
<br />
<style>
    body {
        background-color: #eee;
    }

    .tags button {
        padding: 2px;
        margin: 1px;
    }

    .nav-tabs .nav-link.active {
        font-weight: bold;
        text-decoration: underline;
    }

    .btn-close {
        background: transparent;
        border: none;
        color: dimgray;
        margin-left: 2px;
        width: auto;
        height: auto;
        cursor: pointer;
    }

        .btn-close :hover {
            transition: ease-in-out color .3s;
            color: indianred;
        }
</style>
@{
    string id = string.Empty;
}
@if (User.Claims.Count() > 0)
{
    id = User.Claims.FirstOrDefault(p => p.Type == System.Security.Claims.ClaimTypes.PrimarySid).Value;
}


<div id="app" >

    <div id="Home" class="container-fluid">
        <div class="row">
            <div class="col-md-8 offset-1" id="articles">
                <div class="card">
                    <div class="card-body">

                        <nav>
                            <div class="nav nav-tabs" id="nav-tab" role="tablist">
                                @if (id != string.Empty)
                                {

                                    <feed-tab name="benimyazdiklarim" text="Benim Yazdıklarım" icon="fa fa-user"></feed-tab>
                                }
                                <feed-tab name="sonyazilanlar" text="Son Yazılanlar" active="true" icon="fa fa-list"></feed-tab>


                                <feed-tab v-for="tab in tabs" :key="tab" :name="tab" :text="tab" isclose="true" icon="fa fa-tags"></feed-tab>

                            </div>
                        </nav>
                        <div class="tab-content" id="nav-tabContent">
                            <br />
                            @if (id != string.Empty)
                            {

                                <feed-body name="benimyazdiklarim" userid="@id" :onlyuser="true"></feed-body>
                              
                            }
                            <feed-body name="sonyazilanlar" active="true"></feed-body>
                            <feed-body v-for="tab in tabs" :key="tab" :name="tab" :tag="tab"></feed-body>



                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="card">
                    <div class="card-header text-center">
                        <h6><i class="fa fa-tags"></i> Etiketler</h6>
                    </div>
                    <div id="allTags" class="card-body">
                        <div class="text-center" v-if="isTagLoading"> <i class="fa fa-spinner fa-pulse fa-3x"></i><p style="font-weight: 700;">Yükleniyor</p></div>

                        <div class="tags" v-if="!isTagLoading">
                            <button v-for="item in tags" type="button" class="btn btn-outline-secondary" v-on:click="AddTab(item.tag)"><i class="fa fa-tag"></i> {{item.tag}}</button>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<div id="tokenAl" style="display:none;"></div>

<script src="~/lib/Assets/Js/article-list-component.js"></script>

@*<script src="~/lib/Assets/Js/article-component.js"></script>     Layoutta    *@
<script>


    Vue.component('feed-tab', {
        props: {
            text: { type: String },
            name: { required: true, type: String },
            active: { required: false, type: String },
            isclose: false,
            icon: { type: String },
        },
        template: '<a class="nav-item nav-link" v-bind:id="tabId"  v-bind:class="{active:active}" data-toggle="tab" v-bind:href="href" role="tab"  v-bind:aria-controls="tabElementId" aria-selected="false"> <i :class="icon" v-if="icon"></i> {{text}} <button class=" btn-close" v-if="isclose" v-on:click="CloseTag()"> <i class="fa fa-times-circle"></i> </button></a>',
        computed: {
            href() {
                return "#" + this.tabElementId;
            },
            tabId() {

                return "nav-" + this.name + "-tab";
            },
            tabElementId() {

                return "nav-" + this.name;
            }
        },
        methods: {

            CloseTag() {
                var tag = this.name;
                Home.CloseTab(tag);
            }

        }

    });

    Vue.component('feed-body', {
        props: {
            name: { required: true, type: String },
            active: { required: false },
            tag: { type: String },
            onlyuser: { type: Boolean },
            userid: { type: String }
        },
        template: `
<div class="tab-pane fade" v-bind:id="id" role="tabpanel" v-bind:aria-labelledby="parentId" v-bind:class="{show:active,active:active}">
    <article-list :onlyuser="onlyuser" :userid="userid" :tag="tag" v-if="onlyuser" ></article-list>
    <article-list :userid="userid" :tag="tag" :onlyuser="false" v-if="!onlyuser" ></article-list>

</div>`,
        data() {
            return {
             
            }

        },
        methods: {
        

        },
        mounted: function () {
            
        },
        computed: {
            //paginationLength() {

            //    return Math.round(this.articleTotalCount / this.articleLimit);
            //},
            id() {
                return "nav-" + this.name;
            },
            parentId() {
                return "nav-" + this.name + "-tab";
            },



        }
    });



    var Home = new Vue({
        el: '#Home',

        data: {
            //articleLimit: 2,
            //articleOffset: 0,
            //articleTotalCount: 0,
            tags: [],
            //articles: [],
            //isArticleLoading: true,
            isTagLoading: true,

            tabs: []
        },
        methods: {

            GetTags: function () {

                //  fetch('http://localhost:58160/api/Tag').then(response => response.json()).then(json => console.log(json));
                this.$http.get('http://localhost:58160/api/Tag').then(function (response) {
                    this.tags = response.data;
                    this.isTagLoading = false;
                }, function (error) {
                    console.log(error.statusText);
                });
            },
            AddTab(tag) {
                if (this.tabs.indexOf(tag) == -1) {
                    this.tabs.push(tag);
                    //Domun yüklenmesini beklemek için timeout koyduk
                    setTimeout(() => {
                        var id = "nav-" + tag + "-tab";
                        document.getElementById(id).click();
                    }, 50);

                }
                else {
                    var id = "nav-" + tag + "-tab";
                    document.getElementById(id).click();
                }

            },
            CloseTab(tag) {
                var index = this.tabs.indexOf(tag);
                if (index > -1) {
                    this.tabs.splice(index, 1);
                    setTimeout(() => { document.getElementsByClassName("nav-tabs")[0].getElementsByTagName("a")[1].click(); }, 10);

                }
            },
            formatDate: function (date) {
                return moment(date, 'YYYY-MM-DD HH:mm').format('DD/MM/YYYY HH:mm');
            }
        },
        mounted: function () {
            this.GetTags();
        },
        computed: {


        }
    });


</script>
