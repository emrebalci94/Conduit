// <auto-generated />
using Conduit.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Conduit.Data.Migrations
{
    [DbContext(typeof(ConduitContext))]
    partial class ConduitContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Conduit.Domain.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AuthorUserId");

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<string>("Slug");

                    b.Property<string>("Title");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("AuthorUserId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Conduit.Domain.ArticleFavorite", b =>
                {
                    b.Property<int>("ArticleId");

                    b.Property<int>("UserId");

                    b.HasKey("ArticleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticleFavorites");
                });

            modelBuilder.Entity("Conduit.Domain.ArticleTag", b =>
                {
                    b.Property<int>("ArticleId");

                    b.Property<string>("TagId");

                    b.HasKey("ArticleId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ArticleTags");
                });

            modelBuilder.Entity("Conduit.Domain.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ArticleId");

                    b.Property<int?>("AuthorUserId");

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorUserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Conduit.Domain.FollowedPeople", b =>
                {
                    b.Property<int>("ObserverId");

                    b.Property<int>("TargetId");

                    b.HasKey("ObserverId", "TargetId");

                    b.HasIndex("TargetId");

                    b.ToTable("FollowedPeoples");
                });

            modelBuilder.Entity("Conduit.Domain.Tag", b =>
                {
                    b.Property<string>("TagId");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Conduit.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bio");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("Hash");

                    b.Property<string>("Image");

                    b.Property<string>("LastName");

                    b.Property<string>("Salt");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Conduit.Domain.Article", b =>
                {
                    b.HasOne("Conduit.Domain.User", "AuthorUser")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorUserId");
                });

            modelBuilder.Entity("Conduit.Domain.ArticleFavorite", b =>
                {
                    b.HasOne("Conduit.Domain.Article", "Article")
                        .WithMany("ArticleFavorites")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Conduit.Domain.User", "User")
                        .WithMany("ArticleFavorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Conduit.Domain.ArticleTag", b =>
                {
                    b.HasOne("Conduit.Domain.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Conduit.Domain.Tag", "Tag")
                        .WithMany("ArticleTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Conduit.Domain.Comment", b =>
                {
                    b.HasOne("Conduit.Domain.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId");

                    b.HasOne("Conduit.Domain.User", "AuthorUser")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorUserId");
                });

            modelBuilder.Entity("Conduit.Domain.FollowedPeople", b =>
                {
                    b.HasOne("Conduit.Domain.User", "Observer")
                        .WithMany("FollowedPeoples")
                        .HasForeignKey("ObserverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Conduit.Domain.User", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
